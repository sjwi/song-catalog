getUserForLogin: >
  select * from AppUsers where username= ? and password = ?
  
getMySongsByUserName: > 
  Select * from Song WHERE RELATED IS NULL AND CREATED_BY = ? order by NAME

getSongVersionsByRelatedIdExcludePrivate: >
  select v.ID as VERSION_ID,vc.VERSION,s.ID,s.NAME,s.BODY,s.FREQUENCY,s.DEFAULT_KEY,s.ARTIST,s.NOTES,s.CREATED_BY,s.MODIFIED_BY,s.CHANGED_ON,s.RELATED,s.PRIVATE 
    from Song s inner join Version v on s.id = v.SONG_ID INNER JOIN VersionControl vc on vc.ID = v.VERSION_NAME
    WHERE s.RELATED = ? and s.PRIVATE IS NULL
  
getSongVersionsByRelatedIdIncludePrivate: >
  select v.ID as VERSION_ID,vc.VERSION,s.ID,s.NAME,s.BODY,s.FREQUENCY,s.DEFAULT_KEY,s.ARTIST,s.NOTES,s.CREATED_BY,s.MODIFIED_BY,s.CHANGED_ON,s.RELATED,s.PRIVATE 
    from Song s inner join Version v on s.id = v.SONG_ID INNER JOIN VersionControl vc on vc.ID = v.VERSION_NAME
    WHERE s.RELATED = ?
  
getSongVersionById: >
  select v.ID as VERSION_ID,vc.VERSION,s.ID,s.NAME,s.BODY,s.FREQUENCY,s.DEFAULT_KEY,s.ARTIST,s.NOTES,s.CREATED_BY,s.MODIFIED_BY,s.CHANGED_ON,s.RELATED,s.PRIVATE 
    from Song s inner join Version v on s.id = v.SONG_ID INNER JOIN VersionControl vc on vc.ID = v.VERSION_NAME
    WHERE s.ID = ?

getSetListVersionById: >
  select sl.ID as SET_SONG_ID, sl.SETLIST_ID, sl.SORT_ORDER, v.ID as VERSION_ID,vc.VERSION,s.ID,s.NAME,s.BODY,s.FREQUENCY,sl.DEFAULT_KEY,s.ARTIST,s.NOTES,s.CREATED_BY,s.MODIFIED_BY,s.CHANGED_ON,s.RELATED,s.PRIVATE 
    from Song s inner join Version v on s.id = v.SONG_ID inner join SetList sl on sl.SONG_ID = s.ID INNER JOIN VersionControl vc on vc.ID = v.VERSION_NAME
    WHERE sl.id = ?

getRecordingBySongId: >
  SELECT * FROM Recording WHERE SONG_ID = ?
  
getAllSongsOrderByNameAsc: >
  Select * from Song WHERE RELATED IS NULL and PRIVATE IS NULL order by NAME

getXNumberOfSongsOrderByNameAsc: >
  Select TOP (?) * from Song WHERE RELATED IS NULL and PRIVATE IS NULL order by NAME

insertNewSong: >
  insert into Song (NAME, BODY, DEFAULT_KEY,FREQUENCY,CREATED_BY,MODIFIED_BY,CHANGED_ON,PRIVATE) values (?,?,?,?,?,?,CURRENT_TIMESTAMP,?)
  
getSongById: >
  Select * from Song where ID = ?
  
getKeysetByKeyId: >
  Select * from KeyMaster where keyId = ?

getAllKeysets: >
  Select * from KeyMaster
  
updateSongById: >
  update Song set NAME = ?, BODY = ?, FREQUENCY = ?, DEFAULT_KEY = ?, ARTIST = ?,MODIFIED_BY = ?, CHANGED_ON = CURRENT_TIMESTAMP where ID = ?

updateSongTitleAndBody: >
  update Song set NAME = ?, BODY = ?, MODIFIED_BY = ?, CHANGED_ON = CURRENT_TIMESTAMP where ID = ?

insertSongIntoArchive: >
  Insert into SongArchive select * from Song where ID = ?
  
deleteSongBySongId: >
  Delete from Song where ID = ?

deleteVersionsByRelatedId: >
  Delete from Version where SONG_ID in (select ID from Song where related = ?)
  
deleteSongByRelatedId: >
  Delete from Song where RELATED = ?

deleteFromAllSetlistsBySongId: >
  Delete from SetList where SONG_ID = ?
  
getAllSetlistsOrderByCreatedOnDesc: >
  Select * from SetListMaster order by CREATED_ON DESC
  
getXNumberOfSetlistsOrderByCreatedOnDesc: >
  Select TOP (?) * from SetListMaster order by CREATED_ON DESC
  
getXNumberOfSetlistsOrderByCreatedOnDescWithPagination: >
  SELECT  *
    FROM    ( SELECT    ROW_NUMBER() OVER ( ORDER BY CREATED_ON Desc ) AS RowNum, *
              FROM      SetListMaster
            ) AS RowConstrainedResult
    WHERE   RowNum >= ?
        AND RowNum < ?
    ORDER BY RowNum

getMaxSortValInSetlist: >
  SELECT TOP 1 SORT_ORDER FROM SetList WHERE SETLIST_ID = ? ORDER BY SORT_ORDER DESC
  
insertSongIntoSetOverrideKey: >
  INSERT INTO SetList (SETLIST_ID,SONG_ID,DEFAULT_KEY,SORT_ORDER,ARTIST,NOTES) SELECT ?,ID,?,?,?,? FROM Song WHERE ID = ?
  
updateSetListVersion: >
  UPDATE SetList set SONG_ID = ? where SETLIST_ID = ? and SONG_ID = ?
  
updateSetListVersionBySetSongId: >
   UPDATE SetList set SONG_ID = ?, DEFAULT_KEY = (select DEFAULT_KEY from Song where id = ?)  where ID = ?

updateSongFrequencyById: >
  UPDATE Song SET FREQUENCY = FREQUENCY + 1 WHERE ID = ?
  
updateSetlistLastUpdated: >
  UPDATE SetListMaster SET LAST_UPDATED = CURRENT_TIMESTAMP WHERE ID = ?
  
insertSongIntoSetDefaultKey: >
  INSERT INTO SetList (SETLIST_ID,SONG_ID,DEFAULT_KEY,SORT_ORDER,ARTIST,NOTES) SELECT ?,ID,DEFAULT_KEY,?,?,NOTES FROM Song WHERE ID = ?
  
getSongsInSetBySetId: >
  Select a.ID, a.SETLIST_ID,a.SONG_ID,b.NAME,b.BODY,b.FREQUENCY,a.DEFAULT_KEY,a.SORT_ORDER,a.ARTIST,a.NOTES,b.CREATED_BY,b.MODIFIED_BY,b.CHANGED_ON,b.RELATED,b.PRIVATE
  from SetList a INNER JOIN Song b on a.SONG_ID = b.ID where a.SETLIST_ID = ? order by SORT_ORDER ASC
  
createNewSet: >
  INSERT INTO SetListMaster (SETLIST_NAME,CREATED_ON,LAST_UPDATED,CREATED_BY,ORGANIZATION) VALUES (?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,?,?)
  
getLatestSet: >
  SELECT TOP 1 ID FROM SetListMaster order by ID desc
  
deleteFromSetlistMaster: >
  Delete from SetListMaster where ID = ?
  
insertIntoSetlistArchive: >
  INSERT INTO SetListArchive select * from SetList where SETLIST_ID = ?
  
deleteFromSetlist: >
  Delete from SetList where SETLIST_ID = ?
  
getSetlistById: >
  Select * from SetListMaster where ID = ?
  
searchSongsByTerm: >
  Select * from Song where (RELATED IS NULL AND PRIVATE IS NULL) AND (NAME like ? or BODY like ? or ID like ? or DEFAULT_KEY like ? or NOTES like ?) order by NAME

getSortOrderForSongInSet: >
  select SORT_ORDER from SetList where id = ?
  
decreaseSortOrder: >
  Update SetList set SORT_ORDER = SORT_ORDER - 1 where SETLIST_ID = ? AND SORT_ORDER > ? 
  
getSongFromSetlistBySongId: >
  SELECT SONG_ID FROM SetList where ID = ?
  
decreaseFrequencyBySongId: >
  UPDATE Song SET FREQUENCY = FREQUENCY - 1 WHERE ID = ?
  
deleteFromSetlistBySongId: >
  Delete from SetList where SETLIST_ID = ? and ID = ?
  
updateDefaultKeyForSet: >
  UPDATE SetList set DEFAULT_KEY = ? where ID = ?
 
updateSortOrderForSong: >
  UPDATE SetList SET SORT_ORDER = ? where ID = ? 
  
updateSetListSortForInsert: >
  UPDATE SetList SET SORT_ORDER = SORT_ORDER + 1 where SETLIST_ID = ? and SORT_ORDER >= ?

updateSetListMasterLastModified: >
  UPDATE SetListMaster SET LAST_UPDATED = CURRENT_TIMESTAMP WHERE ID = ?
  
searchSetlistsByTerm: >
  select DISTINCT m.ID,m.SETLIST_NAME,m.CREATED_ON,m.LAST_UPDATED,m.CREATED_BY 
  from SetListMaster m INNER JOIN SetList s on m.ID = s.SETLIST_ID INNER JOIN Song a on s.SONG_ID = a.ID 
  WHERE a.name like ? or a.body like ? or m.SETLIST_NAME like ? order by LAST_UPDATED Desc
  
setDefaultKeyForSong: >
  UPDATE Song set DEFAULT_KEY = ?,CHANGED_ON = CURRENT_TIMESTAMP, MODIFIED_BY = ? where ID = ?
  
createNewVersionForSong: >
  INSERT INTO Song (NAME,BODY,FREQUENCY,DEFAULT_KEY,ARTIST,CREATED_BY,MODIFIED_BY,CHANGED_ON,RELATED)
  SELECT NAME,?,0,?,ARTIST,?,?,CURRENT_TIMESTAMP,? FROM Song WHERE ID = ?

getLatestSongId: >
  SELECT TOP 1 * FROM Song ORDER BY ID DESC
  
createNewVersion: >
  INSERT INTO Version (SONG_ID,VERSION_NAME) VALUES (?,
  (SELECT NEXT_ID FROM VersionControl 
  where ID = (SELECT ISNULL(MAX(VERSION_NAME),0) FROM Version v inner join Song s on v.SONG_ID = s.ID WHERE s.RELATED = ?)))
  
swapMasterOfVersionByRelated: >
  UPDATE Song SET RELATED = ? WHERE RELATED = ?
  
nullifyRelatedBySongId: >
  UPDATE Song SET RELATED = NULL WHERE ID = ?
  
swapMasterOfVersionById: >
  UPDATE Song SET RELATED = ? WHERE ID = ?
  
swapVersionById: >
  UPDATE Version SET SONG_ID = ? WHERE SONG_ID = ?
  
getVersionById: >
  select v.ID as VERSION_ID,vc.VERSION,s.ID,s.NAME,s.BODY,s.FREQUENCY,s.DEFAULT_KEY,s.ARTIST,s.NOTES,s.CREATED_BY,s.MODIFIED_BY,s.CHANGED_ON,s.RELATED,s.PRIVATE 
    from Song s inner join Version v on s.id = v.SONG_ID INNER JOIN VersionControl vc on vc.ID = v.VERSION_NAME
    WHERE s.ID = ?

updateVersionName: >
  update Version set VERSION_NAME = ? where SONG_ID = ?
  
addRecording: >
  INSERT INTO Recording (SONG_ID,PATH,EXT) VALUES (?,?,?)
  
updateSetlistTitle: >
  update SetListMaster set SETLIST_NAME = ? where ID = ?
  
deleteRecordingById: >
  Delete from Recording where SONG_ID = ?
  
makeSongPublic: >
  UPDATE Song SET PRIVATE = NULL WHERE ID = ?
  
makeSongPrivate: >
  UPDATE Song SET PRIVATE = 'Y' WHERE ID = ?
  
getUserByUsername: >
  select u.username, u.password, a.firstname, a.lastname, a.email
  from users u full join AddressBook a on u.username = a.username where u.username = :username

getUserByEmail: >
  select u.username, u.password, a.firstname, a.lastname, a.email
  from users u full join AddressBook a on u.username = a.username where a.email = :email

getAuthoritiesByUsername: >
  select * from authorities where username = ?
  
saveUser: >
  insert into users (username,password,enabled) values (?,?,1)

getUserPassword: >
  select * from users where username = ?

changePassword: >
  update users set password = ? where username = ?

getAllActiveUsers: >
  select distinct u.username, u.password, a.firstname, a.lastname, a.email
  from users u inner join AddressBook a on u.username = a.username 
  inner join authorities r on u.username = r.username where r.authority <> 'SUPERADMIN'
  
getActiveUsersByUsername: >
  select * from users where username = ?

storeToken: >
  insert into EnrollmentToken (TOKEN, EMAIL, PRIVILEGE) values (?,?,?)

getTokenByUser: >
  select * from EnrollmentToken where EMAIL = ?

getAllEnrollmentTokens: >
  select * from EnrollmentToken

deleteTokenById: >
  delete from EnrollmentToken where ID = ?
  
getAddressBookEntryByEmail: >
  select * from AddressBook where email like ?
  
createAddressBookEntry: >
  insert into AddressBook (USERNAME, LASTNAME, FIRSTNAME, EMAIL, PHONE)
  values (?,?,?,?,?)

updateAddressBookEntryByEmail: >
  update AddressBook set USERNAME = ?, LASTNAME = ?, FIRSTNAME = ? 
  where EMAIL = ?

saveUserAuthorities: >
  insert into authorities (username,authority) values (?,?)
  
getAddressBookGroupEntriesByName: >
  select * from AddressBookGroup where name like ? order by NAME asc

getAddressBookGroupEntries: >
  select * from AddressBookGroup order by NAME asc

getEntryIdFromABRelated: >
  select ENTRY_ID from AddressBookRelated where GROUP_ID = ?
  
getEmailFromAddressBook: >
  select Email from AddressBook where ID = ?
  
searchAddressBookEntries: >
  select * from AddressBook where FirstName like ? or LastName like ? or Email like ? or username like ? or Phone like ?

getAddressBookEntries: >
  select * from AddressBook order by LastName
  
getAddressBookEntryById: >
  select * from AddressBook where id = ?

deleteAddressBookGroup: >
  delete from AddressBookGroup where id = ?

deleteAddressBookGroupRelated: >
  delete from AddressBookRelated where GROUP_ID = ?

deleteAddressBookEntry: >
  delete from AddressBook where id = ?

deleteAddressBookEntryRelated: >
  delete from AddressBookRelated where ENTRY_ID = ?

updateAddressBookEntryById: >
  update AddressBook set USERNAME = ?, LASTNAME = ?, FIRSTNAME = ?, EMAIL = ?, PHONE = ? where ID = ?

addMemberToGroup: >
  insert into AddressBookRelated (GROUP_ID,ENTRY_ID) values (?,?)
  
removeMemberFromGroup: >
  delete from AddressBookRelated where ENTRY_ID = ? and GROUP_ID = ?
  
getAddressBookGroupById: >
  select * from AddressBookGroup where id = ?

createAddressBookGroup: >
  insert into AddressBookGroup (NAME) values (?)

getLatestAbGroup: >
  select max(ID) as ID from AddressBookGroup

getAllServices: >
  Select * from Services order by NAME
  
getAllOrganizations: >
  Select * from Organizations order by NAME
  
getOrganizationById: >
  Select * from Organizations where ID = ?

getServiceById: >
  Select * from Services where ID = ?